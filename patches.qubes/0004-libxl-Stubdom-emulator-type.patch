From 7b95a47e7404b6064143d4767c4d23ff84e24d97 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Sun, 7 Apr 2013 19:48:52 +0200
Subject: [PATCH] libxl: Stubdom emulator type
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

Xen have feature of having device model in separate domain (called stub
domain). Add 'type' attribute to 'emulator' element to allow selecting
such configuration. Emulator path is still used for qemu running in dom0
(if any). Libxl currently do not allow to select stubdomain path.

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.html.in     | 17 +++++++++++++++++
 docs/schemas/domaincommon.rng | 28 +++++++++++++++++++++++++++-
 src/conf/domain_conf.c        | 40 ++++++++++++++++++++++++++++++++++++++--
 src/conf/domain_conf.h        | 10 ++++++++++
 src/libxl/libxl_conf.c        | 17 +++++++++++++++++
 5 files changed, 109 insertions(+), 3 deletions(-)

diff --git a/docs/formatdomain.html.in b/docs/formatdomain.html.in
index 02ce792..bcc04b9 100644
--- a/docs/formatdomain.html.in
+++ b/docs/formatdomain.html.in
@@ -2040,6 +2040,23 @@
         The <a href="formatcaps.html">capabilities XML</a> specifies
         the recommended default emulator to use for each particular
         domain type / architecture combination.
+
+        <span class="since">Since 1.2.13</span>, the <code>emulator</code>
+        element may contain <code>type</code> attribute. Possible values are:
+        <dl>
+          <dt><code>type='default'</code></dt>
+          <dd>Equivalent to not setting <code>type</code> attribute at all.
+          </dd>
+
+          <dt><code>type='stubdom'</code></dt>
+          <dd>Launch emulator in stub domain (Xen only). The emulator path
+          still indicate which binary is used in dom0 - there is no control
+          which binary is used as a stub domain.
+          </dd>
+        </dl>
+        <span class="since">Since 1.2.20</span>, the <code>emulator</code>
+        element may contain <code>cmdline</code> attribute with custom command
+        line arguments.
       </dd>
     </dl>
 
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index 8a8149e..bfca73c 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -2770,7 +2770,33 @@
     -->
   <define name="emulator">
     <element name="emulator">
-      <ref name="absFilePath"/>
+      <choice>
+        <group>
+          <optional>
+            <attribute name="type">
+              <choice>
+                <value>qemu</value>
+                <value>stubdom</value>
+              </choice>
+            </attribute>
+          </optional>
+          <optional>
+            <attribute name="cmdline">
+              <text/>
+            </attribute>
+          </optional>
+          <ref name="absFilePath"/>
+        </group>
+        <group>
+          <attribute name="type">
+            <choice>
+              <value>qemu</value>
+              <value>stubdom</value>
+            </choice>
+          </attribute>
+          <empty/>
+        </group>
+      </choice>
     </element>
   </define>
   <!--
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index db3a8cd..d8491b2 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -802,6 +802,10 @@ VIR_ENUM_IMPL(virDomainDiskTray, VIR_DOMAIN_DISK_TRAY_LAST,
               "closed",
               "open");
 
+VIR_ENUM_IMPL(virDomainEmulatorType, VIR_DOMAIN_EMULATOR_TYPE_LAST,
+              "qemu",
+              "stubdom");
+
 VIR_ENUM_IMPL(virDomainRNGModel,
               VIR_DOMAIN_RNG_MODEL_LAST,
               "virtio");
@@ -17560,6 +17564,17 @@ virDomainDefParseXML(xmlDocPtr xml,
     if (virDomainDefParseBootOptions(def, ctxt, &bootHash) < 0)
         goto error;
 
+    def->emulator = virXPathString("string(./devices/emulator[1])", ctxt);
+    if ((tmp = virXPathString("string(./devices/emulator/@type)", ctxt))) {
+        def->emulator_type = virDomainEmulatorTypeTypeFromString(tmp);
+        VIR_FREE(tmp);
+        if (def->emulator_type < 0) {
+            virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
+                           _("Unknown emulator type '%s'"), tmp);
+        }
+    }
+    def->emulator_cmdline = virXPathString("string(./devices/emulator/@cmdline)", ctxt);
+
     /* analysis of the disk devices */
     if ((n = virXPathNodeSet("./devices/disk", ctxt, &nodes)) < 0)
         goto error;
@@ -19628,6 +19643,14 @@ virDomainDefCheckABIStabilityFlags(virDomainDefPtr src,
         goto error;
     }
 
+    if (src->emulator_type != dst->emulator_type) {
+        virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
+                _("Target domain emulator type %s does not match source %s"),
+                virDomainEmulatorTypeTypeToString(dst->emulator_type),
+                virDomainEmulatorTypeTypeToString(src->emulator_type));
+        goto error;
+    }
+
     if (!virDomainDefFeaturesCheckABIStability(src, dst))
         goto error;
 
@@ -24353,8 +24376,21 @@ virDomainDefFormatInternal(virDomainDefPtr def,
     virBufferAddLit(buf, "<devices>\n");
     virBufferAdjustIndent(buf, 2);
 
-    virBufferEscapeString(buf, "<emulator>%s</emulator>\n",
-                          def->emulator);
+    if (def->emulator ||
+            def->emulator_type != VIR_DOMAIN_EMULATOR_TYPE_DEFAULT) {
+        virBufferAddLit(buf, "<emulator");
+        if (def->emulator_type != VIR_DOMAIN_EMULATOR_TYPE_DEFAULT) {
+            virBufferAsprintf(buf, " type='%s'",
+                              virDomainEmulatorTypeTypeToString(def->emulator_type));
+        }
+        virBufferEscapeString(buf, " cmdline='%s'", def->emulator_cmdline);
+        if (!def->emulator) {
+            virBufferAddLit(buf, "/>\n");
+        } else {
+            virBufferEscapeString(buf, ">%s</emulator>\n",
+                                  def->emulator);
+        }
+    }
 
     for (n = 0; n < def->ndisks; n++)
         if (virDomainDiskDefFormat(buf, def->disks[n], flags) < 0)
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 1ce2542..30b8311 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -1966,6 +1966,13 @@ struct _virBlkioDevice {
 };
 
 typedef enum {
+    VIR_DOMAIN_EMULATOR_TYPE_DEFAULT,
+    VIR_DOMAIN_EMULATOR_TYPE_STUBDOM,
+
+    VIR_DOMAIN_EMULATOR_TYPE_LAST
+} virDomainEmulatorType;
+
+typedef enum {
     VIR_DOMAIN_RNG_MODEL_VIRTIO,
 
     VIR_DOMAIN_RNG_MODEL_LAST
@@ -2234,6 +2241,8 @@ struct _virDomainDef {
 
     virDomainOSDef os;
     char *emulator;
+    virDomainEmulatorType emulator_type;
+    char *emulator_cmdline;
     /* These three options are of type virTristateSwitch,
      * except VIR_DOMAIN_FEATURE_CAPABILITIES that is of type
      * virDomainCapabilitiesPolicy */
@@ -3130,6 +3139,7 @@ VIR_ENUM_DECL(virDomainGraphicsSpiceMouseMode)
 VIR_ENUM_DECL(virDomainGraphicsVNCSharePolicy)
 VIR_ENUM_DECL(virDomainHyperv)
 VIR_ENUM_DECL(virDomainKVM)
+VIR_ENUM_DECL(virDomainEmulatorType)
 VIR_ENUM_DECL(virDomainRNGModel)
 VIR_ENUM_DECL(virDomainRNGBackend)
 VIR_ENUM_DECL(virDomainTPMModel)
diff --git a/src/libxl/libxl_conf.c b/src/libxl/libxl_conf.c
index ad829e0..4b74dae 100644
--- a/src/libxl/libxl_conf.c
+++ b/src/libxl/libxl_conf.c
@@ -456,6 +456,23 @@ libxlMakeDomBuildInfo(virDomainDefPtr def,
             b_info->device_model_version = libxlDomainGetEmulatorType(def);
         }
 
+        /* In case of stubdom there will be two qemu instances:
+         *  - in stubdom (libxl uses hardcoded path for this one),
+         *  - in dom0 as a backend for stubdom (if needed).
+         * Emulator path control only the second one. It makes a perfect sense
+         * to use <emulator type='stubdom'/> (yes, without emulator path).
+         */
+        if (def->emulator_type == VIR_DOMAIN_EMULATOR_TYPE_STUBDOM)
+            libxl_defbool_set(&b_info->device_model_stubdomain, 1);
+
+        if (def->emulator_cmdline && def->emulator_cmdline[0]) {
+            b_info->extra_hvm = virStringSplit(def->emulator_cmdline, " ", 0);
+            if (b_info->extra_hvm == NULL) {
+                virReportOOMError();
+                return -1;
+            }
+        }
+
         if (def->nserials) {
             if (def->nserials == 1) {
                 if (libxlMakeChrdevStr(def->serials[0], &b_info->u.hvm.serial) <
-- 
2.7.4

