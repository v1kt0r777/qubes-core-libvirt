From c151cc221c2c7e06adf3155705673cdfc8a5466b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 23 May 2015 04:25:01 +0200
Subject: [PATCH] Add 'nostrictreset' attribute to PCI host devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

This allows to assign PCI device to some VM, even when the device does not
support any reset method. This may be dangerous in some cases (especially when
the device is later assigned to some other VM). But in some cases it still
makes sense - for example when the device is assigned to the same VM whole the
time.

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.html.in     |  3 +++
 docs/schemas/domaincommon.rng |  5 +++++
 src/conf/domain_conf.c        | 13 +++++++++++++
 src/conf/domain_conf.h        |  1 +
 src/util/virhostdev.c         |  2 ++
 src/util/virpci.c             | 18 +++++++++++++++++-
 src/util/virpci.h             |  2 ++
 7 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/docs/formatdomain.html.in b/docs/formatdomain.html.in
index 7da2220..01f1fc0 100644
--- a/docs/formatdomain.html.in
+++ b/docs/formatdomain.html.in
@@ -3744,6 +3744,9 @@
             or hot-plugging the device and <code>virNodeDeviceReAttach</code>
             (or <code>virsh nodedev-reattach</code>) after hot-unplug or
             stopping the guest.
+            Additionally when <code>strictreset</code> is "no", device will
+            be assigned to the domain, even when reset fails. The default is
+            "yes".
           </dd>
           <dt><code>scsi</code></dt>
           <dd>For SCSI devices, user is responsible to make sure the device
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index 2d09b53..36dd332 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -2394,6 +2394,11 @@
               <ref name="virYesNo"/>
             </attribute>
           </optional>
+          <optional>
+            <attribute name="nostrictreset">
+              <ref name="virYesNo"/>
+            </attribute>
+          </optional>
           <interleave>
             <element name="source">
               <optional>
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index 2810706..4ab0466 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -6163,6 +6163,7 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
 {
     xmlNodePtr sourcenode;
     char *managed = NULL;
+    char *nostrictreset = NULL;
     char *sgio = NULL;
     char *rawio = NULL;
     char *backendStr = NULL;
@@ -6181,6 +6182,11 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
             def->managed = true;
     }
 
+    if ((nostrictreset = virXMLPropString(node, "nostrictreset")) != NULL) {
+        if (STREQ(nostrictreset, "yes"))
+            def->nostrictreset = true;
+    }
+
     sgio = virXMLPropString(node, "sgio");
     rawio = virXMLPropString(node, "rawio");
 
@@ -6292,6 +6298,7 @@ virDomainHostdevDefParseXMLSubsys(xmlNodePtr node,
     ret = 0;
  error:
     VIR_FREE(managed);
+    VIR_FREE(nostrictreset);
     VIR_FREE(sgio);
     VIR_FREE(rawio);
     VIR_FREE(backendStr);
@@ -21199,6 +21206,8 @@ virDomainActualNetDefFormat(virBufferPtr buf,
         virDomainHostdevDefPtr hostdef = virDomainNetGetActualHostdev(def);
         if  (hostdef && hostdef->managed)
             virBufferAddLit(buf, " managed='yes'");
+        if  (hostdef && hostdef->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
     }
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
@@ -21374,6 +21383,8 @@ virDomainNetDefFormat(virBufferPtr buf,
     virBufferAsprintf(buf, "<interface type='%s'", typeStr);
     if (hostdef && hostdef->managed)
         virBufferAddLit(buf, " managed='yes'");
+    if (hostdef && hostdef->nostrictreset)
+        virBufferAddLit(buf, " nostrictreset='yes'");
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
                           virTristateBoolTypeToString(def->trustGuestRxFilters));
@@ -22918,6 +22929,8 @@ virDomainHostdevDefFormat(virBufferPtr buf,
     if (def->mode == VIR_DOMAIN_HOSTDEV_MODE_SUBSYS) {
         virBufferAsprintf(buf, " managed='%s'",
                           def->managed ? "yes" : "no");
+        if (def->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
 
         if (def->source.subsys.type == VIR_DOMAIN_HOSTDEV_SUBSYS_TYPE_SCSI &&
             scsisrc->sgio)
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 5376b7c..1b86d44 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -436,6 +436,7 @@ struct _virDomainHostdevDef {
     bool missing;
     bool readonly;
     bool shareable;
+    bool nostrictreset;
     union {
         virDomainHostdevSubsys subsys;
         virDomainHostdevCaps caps;
diff --git a/src/util/virhostdev.c b/src/util/virhostdev.c
index 0673afb..a587470 100644
--- a/src/util/virhostdev.c
+++ b/src/util/virhostdev.c
@@ -264,6 +264,8 @@ virHostdevGetPCIHostDeviceList(virDomainHostdevDefPtr *hostdevs, int nhostdevs)
             virPCIDeviceSetStubDriver(pci, VIR_PCI_STUB_DRIVER_XEN);
         else
             virPCIDeviceSetStubDriver(pci, VIR_PCI_STUB_DRIVER_KVM);
+
+        virPCIDeviceSetStrictReset(pci, !hostdev->nostrictreset);
     }
 
     return pcidevs;
diff --git a/src/util/virpci.c b/src/util/virpci.c
index 683b211..c01a5ad 100644
--- a/src/util/virpci.c
+++ b/src/util/virpci.c
@@ -84,7 +84,7 @@ struct _virPCIDevice {
     bool          has_flr;
     bool          has_pm_reset;
     bool          managed;
-
+    bool          strictreset;
     virPCIStubDriver stubDriver;
 
     /* used by reattach function */
@@ -988,6 +988,9 @@ virPCIDeviceReset(virPCIDevicePtr dev,
                        dev->name,
                        err ? err->message :
                        _("no FLR, PM reset or bus reset available"));
+        if (!dev->strictreset)
+            /* do not fail */
+            ret = 0;
     }
 
  cleanup:
@@ -1738,6 +1741,7 @@ virPCIDeviceNew(unsigned int domain,
     dev->address.bus = bus;
     dev->address.slot = slot;
     dev->address.function = function;
+    dev->strictreset    = true;
 
     if (snprintf(dev->name, sizeof(dev->name), "%.4x:%.2x:%.2x.%.1x",
                  domain, bus, slot, function) >= sizeof(dev->name)) {
@@ -1872,6 +1876,18 @@ virPCIDeviceGetManaged(virPCIDevicePtr dev)
 }
 
 void
+virPCIDeviceSetStrictReset(virPCIDevicePtr dev, bool strictreset)
+{
+    dev->strictreset = strictreset;
+}
+
+unsigned int
+virPCIDeviceGetStrictReset(virPCIDevicePtr dev)
+{
+    return dev->strictreset;
+}
+
+void
 virPCIDeviceSetStubDriver(virPCIDevicePtr dev, virPCIStubDriver driver)
 {
     dev->stubDriver = driver;
diff --git a/src/util/virpci.h b/src/util/virpci.h
index a5e8d00..5508cd4 100644
--- a/src/util/virpci.h
+++ b/src/util/virpci.h
@@ -115,6 +115,8 @@ bool virPCIDeviceGetManaged(virPCIDevice *dev);
 void virPCIDeviceSetStubDriver(virPCIDevicePtr dev,
                                virPCIStubDriver driver);
 virPCIStubDriver virPCIDeviceGetStubDriver(virPCIDevicePtr dev);
+void virPCIDeviceSetStrictReset(virPCIDevice *dev, bool strictreset);
+unsigned int virPCIDeviceGetStrictReset(virPCIDevicePtr dev);
 virPCIDeviceAddressPtr virPCIDeviceGetAddress(virPCIDevicePtr dev);
 int virPCIDeviceSetUsedBy(virPCIDevice *dev,
                           const char *drv_name,
-- 
2.7.4

